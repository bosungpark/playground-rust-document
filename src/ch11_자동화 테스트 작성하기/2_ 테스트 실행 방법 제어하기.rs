fn 테스트_실행_방법_제어하기() {
    print!(
        "
        1. 테스트 실행 방법 제어하기

        cargo test 명령어는 코드를 테스트 모드에서 컴파일하고 생성된 바이너리를 실행
        테스트 바이너리의 기본 동작은 모든 테스트를 병렬로 실행하고 테스트가 수행되는 동안 발생된 출력을 캡처하는 것

        커맨드 라인 옵션을 지정하여 이러한 기본 동작을 변경할 수 있다.

        2. 테스트를 병렬 혹은 순차적으로 실행하기

        테스트는 기본적으로 병렬적으로 실행된다.
        여러 테스트가 동시에 실행되므로, 각 테스트가 공유 상태(공유 자원, 현재 작업 디렉터리, 환경 변수 등)를 갖거나 다른 테스트에 의존해서는 안된다.

        테스트를 병렬로 실행하고 싶지 않거나, 사용할 스레드의 개수에 대한 미세 조정이 필요한 경우에는 --test-threads 플래그를 사용할 수 있다.

        $ cargo test -- --test-threads=1
    \n"
    );
}

fn 함수_출력_표시하기() {
    print!(
        "
    기본적으로 러스트 테스트 라이브러리는 성공한 테스트의 모든 표준 출력 (standard output) 을 캡처    
    테스트에서 println! 매크로를 호출해도, 해당 테스트가 성공하면 터미널에서 println!의 출력은 없다.

    성공한 테스트에서 출력한 내용도 보고 싶다면, --show-output 옵션을 사용할 수 있다.

    $ cargo test -- --show-output
    \n"
    );
}

fn 이름을_지정해_일부_테스트만_실행하기() {
    print!(
        "
    cargo test 명령어에 테스트의 이름을 인수로 넘겨 어떤 테스트를 실행할지 선택할 수 있다.
    또, 테스트 이름의 일부만 지정하면 해당 값에 맞는 모든 테스트가 실행된다.

    $ cargo test 테스트1

    > running 1 test
    > test 테스트1 ... ok

    > test result: ok. 1 passed; 0 failed; 0 ignored; 0 measured; 1 filtered out; finished in 0.00s
    \n"
    );
}

fn 특별_요청이_없다면_일부_테스트_무시하기() {
    print!(
        "
    특정 테스트는 실행하고 싶지 않다면 ignore 속성을 어노테이션하면 된다.

    반대로 ignore 속성을 가진 테스트만 실행하고 싶다면 아래의 명령어를 사용하면 된다.
    $ cargo test -- --ignored

    무시됨 여부와 무관하게 전부 하고 싶다면 아래의 명령어를 사용하면 된다. 
    $ cargo test -- --include-ignored
    \n"
    );
}

#[test]
fn 테스트1() {
    assert_eq!(1, 1);
}

#[test]
fn 테스트2() {
    assert_eq!(1, 1);
}

#[test]
#[ignore]
fn 무시할_테스트1() {
    assert_eq!(1, 1);
}
