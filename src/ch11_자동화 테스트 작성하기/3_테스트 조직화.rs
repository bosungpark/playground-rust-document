fn 테스트_조직화() {
    print!(
        "
        테스트는 복잡한 분야이며, 러스트 커뮤니티에서는 크게 유닛 테스트와 통합 테스트로 나눈다. 
        유닛 테스트는 작고 집중적으로 한 모듈을 테스트하며, 통합 테스트는 마치 작성한 코드를 외부에서 라이브러리를 사용하듯 테스트한다.    

        1. 유닛 테스트

        유닛 테스트는 코드 단위를 분리하여 동작 여부를 파악한다.
        유닛 테스트는 src 디렉터리 내의 각 파일에 테스트 대상이 될 코드와 함께 작성한다.
        테스트 모듈은 #[cfg(test)] 어노테이션을 사용하여 cargo test 실행 시에만 컴파일된다.
        (라이브러리 빌드시에는 제외, #[cfg(test)]를 사용하는 이유는 컴파일 결과에 제외하기 위함.)
        비공개 함수도 유닛 테스트에서 테스트 가능하다.

        2. 통합 테스트

        tests라는 별도의 디렉터리에 위치하기 때문에 #[cfg(test)] 어노테이션이 필요 없다.
        따라서 라이브러리의 공개 API만 호출 가능하다.
        카고는 tests 디렉터리를 특별 취급하여 디렉터리 내 파일을 cargo test 시에만 컴파일한다.

        외부 코드와 같은 방식으로 라이브러리를 테스트한다.
        tests 디렉터리를 생성하여 통합 테스트 파일을 관리한다.
        통합 테스트 파일은 별도의 크레이트로 컴파일되어 실행된다.
    \n"
    );
}
