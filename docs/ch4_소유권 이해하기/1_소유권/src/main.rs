fn main() {
    소유권이_뭔가요?();
    스택_영역과_힙_영역();
    소유권_규칙();
}

fn 소유권이_뭔가요?() {
    // 러스트가 "메모리 관리"를 위해 소유권 (ownership) 이라는 시스템을 만들고, 
    // 컴파일러가 컴파일 중에 검사할 여러 규칙을 정해 메모리를 관리하는 방식.
    // 이 규칙 중 하나라도 위반하면 프로그램은 컴파일되지 않는다.
    // 소유권의 어떠한 특성도 프로그램 실행 속도를 느리게 하지 않는다.
}

fn 스택_영역과_힙_영역() {
    // 러스트 같은 시스템 프로그래밍 언어에서는 값을 스택에 저장하느냐 힙에 저장하느냐가 중요하다.
    // 코드 어느 부분에서 힙의 데이터를 사용하는지 추적하고, 
    // 힙에서 중복되는 데이터를 최소화하고, 
    // 쓰지 않는 데이터를 힙에서 정리해 영역을 확보하는 등의 작업은 모두 소유권과 관련되어 있다.
    // 소유권의 주요 목표는 힙 데이터의 관리이다.

    // 1. 스택
    // 스택에 저장되는 데이터는 모두 명확하고 크기가 정해져 있어야 한다.
    // 메모리 할당자가 새로운 데이터를 저장할 공간을 찾을 필요가 없다.
    // 스택이 빠르고 효율적인 이유 중 하나.
    // 스택의 메모리 할당과 해제가 매우 빠르고 데이터가 붙어있기 때문에, 스택을 사용하면 메모리 접근과 관리가 효율적
    // 그러나 스택은 제한된 용량을 가지고 있고, 스택이 너무 커지면 스택 오버플로우(Stack Overflow)가 발생할 수 있다. 
    // 컴파일 타임에 크기를 알 수 없거나, 크기가 변경될 수 있는 데이터는 스택 대신 힙에 저장되어야 한다.

    // 2. 힙
    // 데이터를 힙에 넣을 때, 메모리 할당자는 커다란 힙 영역 안에서 어떤 빈 지점을 찾고, 
    // 이 지점은 사용 중이라고 표시한 뒤 해당 지점을 가리키는 포인터(pointer)를 반환
    // 이 과정을 힙 공간 할당 (allocating on the heap)이라고 한다.
    // 포인터는 크기가 정해져 있어 스택에 저장할 수 있으나, 
    // 포인터가 가리키는 실제 데이터를 사용할 때는 포인터를 참조해 해당 포인터가 가리키는 위치로 이동하는 과정을 거쳐야 한다.
    // 힙 영역은 이 서로 멀리 떨어진 데이터를 메모리에서 찾는 과정으로 인해 느리다.
}

fn 소유권_규칙() {
    // 러스트에서, 각각의 값은 소유자 (owner) 가 정해져 있다.
    // 한 값의 소유자는 동시에 여럿 존재할 수 없다.
    // 소유자가 스코프 밖으로 벗어날 때, 값은 버려진다 

    let 변수 = "변수";
    

}
