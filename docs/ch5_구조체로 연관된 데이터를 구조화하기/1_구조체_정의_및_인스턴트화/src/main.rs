fn main() {
    구조체_생성();
    구조체_업데이트();
    튜플_구조체();
    유닛_구조체();
}

struct 구조체 {
    필드: bool,
    다른_필드: String, // 참조자를 사용하려면 라이프타임을 명시해야한다.
}

fn 구조체_생성() {
    // 가변성은 해당 인스턴스 전체에 해당
    // 일부 필드만 바꿀 수는 없음
    let mut _인스턴스 = 구조체 {
        필드: true,
        다른_필드: String::from("다른_필드"),
    };

    _인스턴스.필드 = false;

    print!("{}", _인스턴스.필드); // false
}

fn 구조체_업데이트() {
    let _인스턴스 = 구조체 {
        필드: true,
        다른_필드: String::from("다른_필드"),
    };

    let _인스턴스2 = 구조체 {
        필드: false,
        .._인스턴스
    };

    print!("{} {}", _인스턴스2.필드, _인스턴스2.다른_필드); // false 다른_필드

    // ㄴ> 하지만 이 경우 Copy 트레이트를 구현하지 않은 타입을 필드로 가지는 기존의 인스턴스는 사용할 수 없다.
    // ㄴ> 구조체 업데이트 문법이 대입처럼 =을 이용

    // error[E0382]: borrow of moved value: `_인스턴스.다른_필드`
    // print!("{} {}", _인스턴스.필드, _인스턴스.다른_필드);
}

fn 튜플_구조체() {
    struct Color(i32, i32, i32);

    let _black = Color(0, 0, 0);
}

fn 유닛_구조체() {
    // 유사 유닛 구조체:
    // 어떤 타입에 대해 트레이트를 구현하고 싶지만 타입 내부에 어떤 데이터를 저장할 필요는 없을 경우
    struct AlwaysEqual;

    let _subject = AlwaysEqual;
}
